{"ast":null,"code":"var _jsxFileName = \"/home/infinity/DANISH/6th sem/4U/4u/src/pages/Dashboard/WorkerDashboard.jsx\",\n  _s = $RefreshSig$();\n// // import { useState, useEffect } from 'react';\n// // import { doc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';\n// // import { db } from '../../firebase/config';\n// // import { useAuth } from '../../context/AuthContext';\n// // import { Link } from 'react-router-dom';\n// // import '../../styles/dashboard.css';\n\n// // const WorkerDashboard = () => {\n// //   const [workerData, setWorkerData] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n// //   const [bookings, setBookings] = useState([]);\n// //   const { user } = useAuth();\n\n// //   useEffect(() => {\n// //     const fetchWorkerData = async () => {\n// //       if (!user) return;\n\n// //       try {\n// //         const workerRef = doc(db, 'workers', user.uid);\n// //         const workerSnap = await getDoc(workerRef);\n\n// //         if (workerSnap.exists()) {\n// //           setWorkerData(workerSnap.data());\n// //         } else {\n// //           // Redirect to create profile if worker profile doesn't exist\n// //           window.location.href = '/worker-profile';\n// //         }\n// //       } catch (error) {\n// //         console.error(\"Error fetching worker data:\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     const fetchBookings = async () => {\n// //       if (!user) return;\n\n// //       try {\n// //         const bookingsRef = collection(db, 'bookings');\n// //         const q = query(bookingsRef, where('workerId', '==', user.uid));\n// //         const querySnapshot = await getDocs(q);\n\n// //         const bookingsData = [];\n// //         querySnapshot.forEach((doc) => {\n// //           bookingsData.push({ id: doc.id, ...doc.data() });\n// //         });\n\n// //         setBookings(bookingsData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching bookings:\", error);\n// //       }\n// //     };\n\n// //     fetchWorkerData();\n// //     fetchBookings();\n// //   }, [user]);\n\n// //   if (loading) {\n// //     return <div className=\"loading\">Loading...</div>;\n// //   }\n\n// //   if (!workerData) {\n// //     return (\n// //       <div className=\"no-profile\">\n// //         <h2>You need to create your worker profile first</h2>\n// //         <Link to=\"/worker-profile\" className=\"btn\">Create Profile</Link>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"dashboard\">\n// //       <div className=\"dashboard-header\">\n// //         <h1>Welcome, {workerData.name}</h1>\n// //         <p>Here's your work dashboard</p>\n// //       </div>\n\n// //       <div className=\"dashboard-stats\">\n// //         <div className=\"stat-card\">\n// //           <h3>Total Bookings</h3>\n// //           <p>{bookings.length}</p>\n// //         </div>\n// //         <div className=\"stat-card\">\n// //           <h3>Upcoming Jobs</h3>\n// //           <p>{bookings.filter(b => b.status === 'confirmed').length}</p>\n// //         </div>\n// //         <div className=\"stat-card\">\n// //           <h3>Rating</h3>\n// //           <p>{workerData.rating || 'Not rated yet'}</p>\n// //         </div>\n// //       </div>\n\n// //       <div className=\"dashboard-sections\">\n// //         <section className=\"upcoming-jobs\">\n// //           <h2>Your Upcoming Jobs</h2>\n// //           {bookings.length === 0 ? (\n// //             <div className=\"no-jobs\">\n// //               <p>You don't have any upcoming jobs.</p>\n// //             </div>\n// //           ) : (\n// //             <div className=\"jobs-list\">\n// //               {bookings.map((booking) => (\n// //                 <div key={booking.id} className=\"job-card\">\n// //                   <h3>Booking for {booking.userName}</h3>\n// //                   <p>Date: {booking.date}</p>\n// //                   <p>Time: {booking.time}</p>\n// //                   <p>Duration: {booking.hours} hours</p>\n// //                   <p>Earnings: ${booking.total}</p>\n// //                   <p>Status: <span className={`status ${booking.status}`}>{booking.status}</span></p>\n// //                 </div>\n// //               ))}\n// //             </div>\n// //           )}\n// //         </section>\n\n// //         <section className=\"quick-actions\">\n// //           <h2>Quick Actions</h2>\n// //           <div className=\"actions-grid\">\n// //             <Link to=\"/worker-profile\" className=\"action-card\">\n// //               <h3>Update Profile</h3>\n// //               <p>Edit your profile information</p>\n// //             </Link>\n// //             <Link to=\"/availability\" className=\"action-card\">\n// //               <h3>Set Availability</h3>\n// //               <p>Update when you're available</p>\n// //             </Link>\n// //             <Link to=\"/bookings\" className=\"action-card\">\n// //               <h3>View All Bookings</h3>\n// //               <p>See all your bookings</p>\n// //             </Link>\n// //           </div>\n// //         </section>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default WorkerDashboard;\n\n// import { useState, useEffect } from 'react';\n// import { doc, getDoc, collection, query, where, getDocs, updateDoc, onSnapshot } from 'firebase/firestore';\n// import { db } from '../../firebase/config';\n// import { useAuth } from '../../context/AuthContext';\n// import { Link } from 'react-router-dom';\n// import { toast } from 'react-toastify';\n// import '../../styles/dashboard.css';\n\n// const WorkerDashboard = () => {\n//   const [workerData, setWorkerData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [bookings, setBookings] = useState([]);\n//   const [newBookings, setNewBookings] = useState([]);\n//   const { user } = useAuth();\n\n//   useEffect(() => {\n//     const fetchWorkerData = async () => {\n//       if (!user) return;\n\n//       try {\n//         const workerRef = doc(db, 'workers', user.uid);\n//         const workerSnap = await getDoc(workerRef);\n\n//         if (workerSnap.exists()) {\n//           setWorkerData(workerSnap.data());\n//         } else {\n//           // Redirect to create profile if worker profile doesn't exist\n//           window.location.href = '/worker-profile';\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching worker data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     const fetchBookings = async () => {\n//       if (!user) return;\n\n//       try {\n//         const bookingsRef = collection(db, 'bookings');\n//         const q = query(bookingsRef, where('workerId', '==', user.uid));\n//         const querySnapshot = await getDocs(q);\n\n//         const bookingsData = [];\n//         const pendingBookings = [];\n\n//         querySnapshot.forEach((doc) => {\n//           const booking = { id: doc.id, ...doc.data() };\n//           bookingsData.push(booking);\n//           if (booking.status === 'pending') {\n//             pendingBookings.push(booking);\n//           }\n//         });\n\n//         setBookings(bookingsData);\n//         setNewBookings(pendingBookings);\n\n//         // Show notifications for new pending bookings\n//         if (pendingBookings.length > 0) {\n//           toast.info(`You have ${pendingBookings.length} new booking requests`, {\n//             autoClose: false,\n//             closeOnClick: false\n//           });\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching bookings:\", error);\n//       }\n//     };\n\n//     fetchWorkerData();\n//     fetchBookings();\n\n//     // Set up real-time listener for new bookings\n//     const unsubscribe = onSnapshot(\n//       query(collection(db, 'bookings'), where('workerId', '==', user.uid), where('status', '==', 'pending')),\n//       (snapshot) => {\n//         const newPendingBookings = [];\n//         snapshot.docChanges().forEach((change) => {\n//           if (change.type === 'added') {\n//             newPendingBookings.push({ id: change.doc.id, ...change.doc.data() });\n//           }\n//         });\n\n//         if (newPendingBookings.length > 0) {\n//           setNewBookings(prev => [...prev, ...newPendingBookings]);\n//           toast.info(`You have ${newPendingBookings.length} new booking request(s)`, {\n//             autoClose: false,\n//             closeOnClick: false\n//           });\n//         }\n//       }\n//     );\n\n//     return () => unsubscribe();\n//   }, [user]);\n\n//   const handleBookingAction = async (bookingId, action) => {\n//     try {\n//       const bookingRef = doc(db, 'bookings', bookingId);\n//       const newStatus = action === 'accept' ? 'confirmed' : 'rejected';\n\n//       await updateDoc(bookingRef, {\n//         status: newStatus,\n//         updatedAt: new Date()\n//       });\n\n//       // Update local state\n//       setBookings(bookings.map(booking => \n//         booking.id === bookingId ? {...booking, status: newStatus} : booking\n//       ));\n//       setNewBookings(newBookings.filter(booking => booking.id !== bookingId));\n\n//       toast.success(`Booking ${newStatus} successfully!`);\n\n//       // Notify user about the status change (you would implement this in your notification system)\n//       // For now, we'll just log it\n//       console.log(`Notification sent to user: Your booking has been ${newStatus}`);\n\n//     } catch (error) {\n//       console.error(`Error ${action}ing booking:`, error);\n//       toast.error(`Error ${action}ing booking`);\n//     }\n//   };\n\n//   const handleCompleteBooking = async (bookingId) => {\n//     try {\n//       const bookingRef = doc(db, 'bookings', bookingId);\n//       await updateDoc(bookingRef, {\n//         status: 'completed',\n//         completedAt: new Date()\n//       });\n\n//       setBookings(bookings.map(booking => \n//         booking.id === bookingId ? {...booking, status: 'completed'} : booking\n//       ));\n\n//       toast.success('Booking marked as completed!');\n//     } catch (error) {\n//       console.error('Error completing booking:', error);\n//       toast.error('Error completing booking');\n//     }\n//   };\n\n//   const getStatusBadge = (status) => {\n//     switch(status) {\n//       case 'pending':\n//         return <span className=\"status pending\">Pending</span>;\n//       case 'confirmed':\n//         return <span className=\"status confirmed\">Confirmed</span>;\n//       case 'completed':\n//         return <span className=\"status completed\">Completed</span>;\n//       case 'rejected':\n//         return <span className=\"status rejected\">Rejected</span>;\n//       case 'cancelled':\n//         return <span className=\"status cancelled\">Cancelled</span>;\n//       default:\n//         return <span className=\"status unknown\">Unknown</span>;\n//     }\n//   };\n\n//   if (loading) {\n//     return <div className=\"loading\">Loading...</div>;\n//   }\n\n//   if (!workerData) {\n//     return (\n//       <div className=\"no-profile\">\n//         <h2>You need to create your worker profile first</h2>\n//         <Link to=\"/worker-profile\" className=\"btn\">Create Profile</Link>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"dashboard\">\n//       <div className=\"dashboard-header\">\n//         <h1>Welcome, {workerData.name}</h1>\n//         <p>Here's your work dashboard</p>\n\n//         {newBookings.length > 0 && (\n//           <div className=\"notification-badge\">\n//             {newBookings.length} new booking{newBookings.length > 1 ? 's' : ''}\n//           </div>\n//         )}\n//       </div>\n\n//       <div className=\"dashboard-stats\">\n//         <div className=\"stat-card\">\n//           <h3>Total Bookings</h3>\n//           <p>{bookings.length}</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>Upcoming Jobs</h3>\n//           <p>{bookings.filter(b => b.status === 'confirmed').length}</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>Pending Requests</h3>\n//           <p>{newBookings.length}</p>\n//         </div>\n//       </div>\n\n//       <div className=\"dashboard-sections\">\n//         <section className=\"pending-requests\">\n//           <h2>Pending Booking Requests</h2>\n//           {newBookings.length === 0 ? (\n//             <div className=\"no-requests\">\n//               <p>You don't have any pending booking requests.</p>\n//             </div>\n//           ) : (\n//             <div className=\"requests-list\">\n//               {newBookings.map((booking) => (\n//                 <div key={booking.id} className=\"request-card\">\n//                   <div className=\"request-header\">\n//                     <h3>Booking from {booking.userName}</h3>\n//                     {getStatusBadge(booking.status)}\n//                   </div>\n//                   <div className=\"request-details\">\n//                     <p><strong>Service:</strong> {workerData.profession}</p>\n//                     <p><strong>Date:</strong> {booking.date}</p>\n//                     <p><strong>Time:</strong> {booking.time}</p>\n//                     <p><strong>Duration:</strong> {booking.hours} hours</p>\n//                     <p><strong>Total Earnings:</strong> ${booking.total}</p>\n//                   </div>\n//                   <div className=\"request-actions\">\n//                     <button \n//                       className=\"accept-btn\"\n//                       onClick={() => handleBookingAction(booking.id, 'accept')}\n//                     >\n//                       Accept\n//                     </button>\n//                     <button \n//                       className=\"reject-btn\"\n//                       onClick={() => handleBookingAction(booking.id, 'reject')}\n//                     >\n//                       Reject\n//                     </button>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </section>\n\n//         <section className=\"upcoming-jobs\">\n//           <h2>Your Confirmed Jobs</h2>\n//           {bookings.filter(b => b.status === 'confirmed').length === 0 ? (\n//             <div className=\"no-jobs\">\n//               <p>You don't have any confirmed jobs.</p>\n//             </div>\n//           ) : (\n//             <div className=\"jobs-list\">\n//               {bookings\n//                 .filter(booking => booking.status === 'confirmed')\n//                 .map((booking) => (\n//                   <div key={booking.id} className=\"job-card\">\n//                     <div className=\"job-header\">\n//                       <h3>Booking from {booking.userName}</h3>\n//                       {getStatusBadge(booking.status)}\n//                     </div>\n//                     <div className=\"job-details\">\n//                       <p><strong>Date:</strong> {booking.date}</p>\n//                       <p><strong>Time:</strong> {booking.time}</p>\n//                       <p><strong>Duration:</strong> {booking.hours} hours</p>\n//                       <p><strong>Earnings:</strong> ${booking.total}</p>\n//                     </div>\n//                     <div className=\"job-actions\">\n//                       <button \n//                         className=\"complete-btn\"\n//                         onClick={() => handleCompleteBooking(booking.id)}\n//                       >\n//                         Mark as Completed\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))}\n//             </div>\n//           )}\n//         </section>\n\n//         <section className=\"quick-actions\">\n//           <h2>Quick Actions</h2>\n//           <div className=\"actions-grid\">\n//             <Link to=\"/worker-profile\" className=\"action-card\">\n//               <h3>Update Profile</h3>\n//               <p>Edit your profile information</p>\n//             </Link>\n//             <Link to=\"/availability\" className=\"action-card\">\n//               <h3>Set Availability</h3>\n//               <p>Update when you're available</p>\n//             </Link>\n//             <Link to=\"/bookings\" className=\"action-card\">\n//               <h3>View All Bookings</h3>\n//               <p>See all your bookings</p>\n//             </Link>\n//           </div>\n//         </section>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default WorkerDashboard;\n\nimport { useState, useEffect } from 'react';\nimport { doc, getDoc, collection, query, where, getDocs, updateDoc, onSnapshot } from 'firebase/firestore';\nimport { db } from '../../firebase/config';\nimport { useAuth } from '../../context/AuthContext';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport '../../styles/dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkerDashboard = () => {\n  _s();\n  const [workerData, setWorkerData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [bookings, setBookings] = useState([]);\n  const [pendingBookings, setPendingBookings] = useState([]);\n  const [confirmedBookings, setConfirmedBookings] = useState([]);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchWorkerData = async () => {\n      if (!user) return;\n      try {\n        const workerRef = doc(db, 'workers', user.uid);\n        const workerSnap = await getDoc(workerRef);\n        if (workerSnap.exists()) {\n          setWorkerData(workerSnap.data());\n        } else {\n          window.location.href = '/worker-profile';\n        }\n      } catch (error) {\n        console.error(\"Error fetching worker data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Real-time listener for all bookings\n    const unsubscribeBookings = onSnapshot(query(collection(db, 'bookings'), where('workerId', '==', user.uid)), snapshot => {\n      const allBookings = [];\n      const newPending = [];\n      const newConfirmed = [];\n      snapshot.forEach(doc => {\n        const booking = {\n          id: doc.id,\n          ...doc.data()\n        };\n        allBookings.push(booking);\n        if (booking.status === 'pending') {\n          newPending.push(booking);\n        } else if (booking.status === 'confirmed') {\n          newConfirmed.push(booking);\n        }\n      });\n      setBookings(allBookings);\n      setPendingBookings(newPending);\n      setConfirmedBookings(newConfirmed);\n\n      // Check for new pending bookings\n      snapshot.docChanges().forEach(change => {\n        if (change.type === 'added' && change.doc.data().status === 'pending') {\n          toast.info(`New booking request from ${change.doc.data().userName}`, {\n            autoClose: false,\n            closeOnClick: false\n          });\n        }\n      });\n    });\n    fetchWorkerData();\n    return () => unsubscribeBookings();\n  }, [user]);\n  const handleBookingAction = async (bookingId, action) => {\n    try {\n      const bookingRef = doc(db, 'bookings', bookingId);\n      const newStatus = action === 'accept' ? 'confirmed' : 'rejected';\n      await updateDoc(bookingRef, {\n        status: newStatus,\n        updatedAt: new Date()\n      });\n\n      // Update local state\n      setBookings(bookings.map(b => b.id === bookingId ? {\n        ...b,\n        status: newStatus\n      } : b));\n      setPendingBookings(pendingBookings.filter(b => b.id !== bookingId));\n      if (newStatus === 'confirmed') {\n        setConfirmedBookings([...confirmedBookings, {\n          ...bookings.find(b => b.id === bookingId),\n          status: 'confirmed'\n        }]);\n      }\n      toast.success(`Booking ${newStatus} successfully!`);\n    } catch (error) {\n      console.error(`Error ${action}ing booking:`, error);\n      toast.error(`Error ${action}ing booking`);\n    }\n  };\n  const handleCompleteBooking = async bookingId => {\n    try {\n      const bookingRef = doc(db, 'bookings', bookingId);\n      await updateDoc(bookingRef, {\n        status: 'completed',\n        completedAt: new Date()\n      });\n      setBookings(bookings.map(b => b.id === bookingId ? {\n        ...b,\n        status: 'completed'\n      } : b));\n      setConfirmedBookings(confirmedBookings.filter(b => b.id !== bookingId));\n      toast.success('Booking marked as completed!');\n    } catch (error) {\n      console.error('Error completing booking:', error);\n      toast.error('Error completing booking');\n    }\n  };\n  const getStatusBadge = status => {\n    switch (status) {\n      case 'pending':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status pending\",\n          children: \"Pending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 16\n        }, this);\n      case 'confirmed':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status confirmed\",\n          children: \"Confirmed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 16\n        }, this);\n      case 'completed':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status completed\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 16\n        }, this);\n      case 'rejected':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status rejected\",\n          children: \"Rejected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 16\n        }, this);\n      case 'cancelled':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status cancelled\",\n          children: \"Cancelled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status unknown\",\n          children: \"Unknown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 12\n    }, this);\n  }\n  if (!workerData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-profile\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You need to create your worker profile first\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/worker-profile\",\n        className: \"btn\",\n        children: \"Create Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome, \", workerData.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Here's your work dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this), pendingBookings.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-badge\",\n        children: [pendingBookings.length, \" new booking\", pendingBookings.length > 1 ? 's' : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Total Bookings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: bookings.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Upcoming Jobs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: confirmedBookings.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Pending Requests\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: pendingBookings.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-sections\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"pending-requests\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Pending Booking Requests\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this), pendingBookings.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-requests\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You don't have any pending booking requests.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"requests-list\",\n          children: pendingBookings.map(booking => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"request-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"request-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Booking from \", booking.userName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 21\n              }, this), getStatusBadge(booking.status)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"request-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Service:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 649,\n                  columnNumber: 24\n                }, this), \" \", workerData.profession]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 649,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 650,\n                  columnNumber: 24\n                }, this), \" \", booking.date]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 650,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 24\n                }, this), \" \", booking.time]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 651,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Duration:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 24\n                }, this), \" \", booking.hours, \" hours\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 652,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Earnings:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 653,\n                  columnNumber: 24\n                }, this), \" $\", booking.total]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"request-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"accept-btn\",\n                onClick: () => handleBookingAction(booking.id, 'accept'),\n                children: \"Accept\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"reject-btn\",\n                onClick: () => handleBookingAction(booking.id, 'reject'),\n                children: \"Reject\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 662,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 19\n            }, this)]\n          }, booking.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"upcoming-jobs\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Confirmed Jobs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 11\n        }, this), confirmedBookings.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-jobs\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You don't have any confirmed jobs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jobs-list\",\n          children: confirmedBookings.map(booking => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Booking from \", booking.userName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 21\n              }, this), getStatusBadge(booking.status)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 690,\n                  columnNumber: 24\n                }, this), \" \", booking.date]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 691,\n                  columnNumber: 24\n                }, this), \" \", booking.time]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 691,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Duration:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 692,\n                  columnNumber: 24\n                }, this), \" \", booking.hours, \" hours\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Earnings:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 693,\n                  columnNumber: 24\n                }, this), \" $\", booking.total]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-actions\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"complete-btn\",\n                onClick: () => handleCompleteBooking(booking.id),\n                children: \"Mark as Completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 19\n            }, this)]\n          }, booking.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"quick-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Quick Actions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actions-grid\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/worker-profile\",\n            className: \"action-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Update Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Edit your profile information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/availability\",\n            className: \"action-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Set Availability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Update when you're available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/bookings\",\n            className: \"action-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"View All Bookings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"See all your bookings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 606,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkerDashboard, \"yOmEck0rYA7kf7i+yFuEpqbjU1U=\", false, function () {\n  return [useAuth];\n});\n_c = WorkerDashboard;\nexport default WorkerDashboard;\nvar _c;\n$RefreshReg$(_c, \"WorkerDashboard\");","map":{"version":3,"names":["useState","useEffect","doc","getDoc","collection","query","where","getDocs","updateDoc","onSnapshot","db","useAuth","Link","toast","jsxDEV","_jsxDEV","WorkerDashboard","_s","workerData","setWorkerData","loading","setLoading","bookings","setBookings","pendingBookings","setPendingBookings","confirmedBookings","setConfirmedBookings","user","fetchWorkerData","workerRef","uid","workerSnap","exists","data","window","location","href","error","console","unsubscribeBookings","snapshot","allBookings","newPending","newConfirmed","forEach","booking","id","push","status","docChanges","change","type","info","userName","autoClose","closeOnClick","handleBookingAction","bookingId","action","bookingRef","newStatus","updatedAt","Date","map","b","filter","find","success","handleCompleteBooking","completedAt","getStatusBadge","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","name","length","profession","date","time","hours","total","onClick","_c","$RefreshReg$"],"sources":["/home/infinity/DANISH/6th sem/4U/4u/src/pages/Dashboard/WorkerDashboard.jsx"],"sourcesContent":["// // import { useState, useEffect } from 'react';\n// // import { doc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';\n// // import { db } from '../../firebase/config';\n// // import { useAuth } from '../../context/AuthContext';\n// // import { Link } from 'react-router-dom';\n// // import '../../styles/dashboard.css';\n\n// // const WorkerDashboard = () => {\n// //   const [workerData, setWorkerData] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n// //   const [bookings, setBookings] = useState([]);\n// //   const { user } = useAuth();\n\n// //   useEffect(() => {\n// //     const fetchWorkerData = async () => {\n// //       if (!user) return;\n      \n// //       try {\n// //         const workerRef = doc(db, 'workers', user.uid);\n// //         const workerSnap = await getDoc(workerRef);\n        \n// //         if (workerSnap.exists()) {\n// //           setWorkerData(workerSnap.data());\n// //         } else {\n// //           // Redirect to create profile if worker profile doesn't exist\n// //           window.location.href = '/worker-profile';\n// //         }\n// //       } catch (error) {\n// //         console.error(\"Error fetching worker data:\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     const fetchBookings = async () => {\n// //       if (!user) return;\n      \n// //       try {\n// //         const bookingsRef = collection(db, 'bookings');\n// //         const q = query(bookingsRef, where('workerId', '==', user.uid));\n// //         const querySnapshot = await getDocs(q);\n        \n// //         const bookingsData = [];\n// //         querySnapshot.forEach((doc) => {\n// //           bookingsData.push({ id: doc.id, ...doc.data() });\n// //         });\n        \n// //         setBookings(bookingsData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching bookings:\", error);\n// //       }\n// //     };\n\n// //     fetchWorkerData();\n// //     fetchBookings();\n// //   }, [user]);\n\n// //   if (loading) {\n// //     return <div className=\"loading\">Loading...</div>;\n// //   }\n\n// //   if (!workerData) {\n// //     return (\n// //       <div className=\"no-profile\">\n// //         <h2>You need to create your worker profile first</h2>\n// //         <Link to=\"/worker-profile\" className=\"btn\">Create Profile</Link>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"dashboard\">\n// //       <div className=\"dashboard-header\">\n// //         <h1>Welcome, {workerData.name}</h1>\n// //         <p>Here's your work dashboard</p>\n// //       </div>\n      \n// //       <div className=\"dashboard-stats\">\n// //         <div className=\"stat-card\">\n// //           <h3>Total Bookings</h3>\n// //           <p>{bookings.length}</p>\n// //         </div>\n// //         <div className=\"stat-card\">\n// //           <h3>Upcoming Jobs</h3>\n// //           <p>{bookings.filter(b => b.status === 'confirmed').length}</p>\n// //         </div>\n// //         <div className=\"stat-card\">\n// //           <h3>Rating</h3>\n// //           <p>{workerData.rating || 'Not rated yet'}</p>\n// //         </div>\n// //       </div>\n      \n// //       <div className=\"dashboard-sections\">\n// //         <section className=\"upcoming-jobs\">\n// //           <h2>Your Upcoming Jobs</h2>\n// //           {bookings.length === 0 ? (\n// //             <div className=\"no-jobs\">\n// //               <p>You don't have any upcoming jobs.</p>\n// //             </div>\n// //           ) : (\n// //             <div className=\"jobs-list\">\n// //               {bookings.map((booking) => (\n// //                 <div key={booking.id} className=\"job-card\">\n// //                   <h3>Booking for {booking.userName}</h3>\n// //                   <p>Date: {booking.date}</p>\n// //                   <p>Time: {booking.time}</p>\n// //                   <p>Duration: {booking.hours} hours</p>\n// //                   <p>Earnings: ${booking.total}</p>\n// //                   <p>Status: <span className={`status ${booking.status}`}>{booking.status}</span></p>\n// //                 </div>\n// //               ))}\n// //             </div>\n// //           )}\n// //         </section>\n        \n// //         <section className=\"quick-actions\">\n// //           <h2>Quick Actions</h2>\n// //           <div className=\"actions-grid\">\n// //             <Link to=\"/worker-profile\" className=\"action-card\">\n// //               <h3>Update Profile</h3>\n// //               <p>Edit your profile information</p>\n// //             </Link>\n// //             <Link to=\"/availability\" className=\"action-card\">\n// //               <h3>Set Availability</h3>\n// //               <p>Update when you're available</p>\n// //             </Link>\n// //             <Link to=\"/bookings\" className=\"action-card\">\n// //               <h3>View All Bookings</h3>\n// //               <p>See all your bookings</p>\n// //             </Link>\n// //           </div>\n// //         </section>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default WorkerDashboard;\n\n\n\n// import { useState, useEffect } from 'react';\n// import { doc, getDoc, collection, query, where, getDocs, updateDoc, onSnapshot } from 'firebase/firestore';\n// import { db } from '../../firebase/config';\n// import { useAuth } from '../../context/AuthContext';\n// import { Link } from 'react-router-dom';\n// import { toast } from 'react-toastify';\n// import '../../styles/dashboard.css';\n\n// const WorkerDashboard = () => {\n//   const [workerData, setWorkerData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [bookings, setBookings] = useState([]);\n//   const [newBookings, setNewBookings] = useState([]);\n//   const { user } = useAuth();\n\n//   useEffect(() => {\n//     const fetchWorkerData = async () => {\n//       if (!user) return;\n      \n//       try {\n//         const workerRef = doc(db, 'workers', user.uid);\n//         const workerSnap = await getDoc(workerRef);\n        \n//         if (workerSnap.exists()) {\n//           setWorkerData(workerSnap.data());\n//         } else {\n//           // Redirect to create profile if worker profile doesn't exist\n//           window.location.href = '/worker-profile';\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching worker data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     const fetchBookings = async () => {\n//       if (!user) return;\n      \n//       try {\n//         const bookingsRef = collection(db, 'bookings');\n//         const q = query(bookingsRef, where('workerId', '==', user.uid));\n//         const querySnapshot = await getDocs(q);\n        \n//         const bookingsData = [];\n//         const pendingBookings = [];\n        \n//         querySnapshot.forEach((doc) => {\n//           const booking = { id: doc.id, ...doc.data() };\n//           bookingsData.push(booking);\n//           if (booking.status === 'pending') {\n//             pendingBookings.push(booking);\n//           }\n//         });\n        \n//         setBookings(bookingsData);\n//         setNewBookings(pendingBookings);\n        \n//         // Show notifications for new pending bookings\n//         if (pendingBookings.length > 0) {\n//           toast.info(`You have ${pendingBookings.length} new booking requests`, {\n//             autoClose: false,\n//             closeOnClick: false\n//           });\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching bookings:\", error);\n//       }\n//     };\n\n//     fetchWorkerData();\n//     fetchBookings();\n    \n//     // Set up real-time listener for new bookings\n//     const unsubscribe = onSnapshot(\n//       query(collection(db, 'bookings'), where('workerId', '==', user.uid), where('status', '==', 'pending')),\n//       (snapshot) => {\n//         const newPendingBookings = [];\n//         snapshot.docChanges().forEach((change) => {\n//           if (change.type === 'added') {\n//             newPendingBookings.push({ id: change.doc.id, ...change.doc.data() });\n//           }\n//         });\n        \n//         if (newPendingBookings.length > 0) {\n//           setNewBookings(prev => [...prev, ...newPendingBookings]);\n//           toast.info(`You have ${newPendingBookings.length} new booking request(s)`, {\n//             autoClose: false,\n//             closeOnClick: false\n//           });\n//         }\n//       }\n//     );\n\n//     return () => unsubscribe();\n//   }, [user]);\n\n//   const handleBookingAction = async (bookingId, action) => {\n//     try {\n//       const bookingRef = doc(db, 'bookings', bookingId);\n//       const newStatus = action === 'accept' ? 'confirmed' : 'rejected';\n      \n//       await updateDoc(bookingRef, {\n//         status: newStatus,\n//         updatedAt: new Date()\n//       });\n      \n//       // Update local state\n//       setBookings(bookings.map(booking => \n//         booking.id === bookingId ? {...booking, status: newStatus} : booking\n//       ));\n//       setNewBookings(newBookings.filter(booking => booking.id !== bookingId));\n      \n//       toast.success(`Booking ${newStatus} successfully!`);\n      \n//       // Notify user about the status change (you would implement this in your notification system)\n//       // For now, we'll just log it\n//       console.log(`Notification sent to user: Your booking has been ${newStatus}`);\n      \n//     } catch (error) {\n//       console.error(`Error ${action}ing booking:`, error);\n//       toast.error(`Error ${action}ing booking`);\n//     }\n//   };\n\n//   const handleCompleteBooking = async (bookingId) => {\n//     try {\n//       const bookingRef = doc(db, 'bookings', bookingId);\n//       await updateDoc(bookingRef, {\n//         status: 'completed',\n//         completedAt: new Date()\n//       });\n      \n//       setBookings(bookings.map(booking => \n//         booking.id === bookingId ? {...booking, status: 'completed'} : booking\n//       ));\n      \n//       toast.success('Booking marked as completed!');\n//     } catch (error) {\n//       console.error('Error completing booking:', error);\n//       toast.error('Error completing booking');\n//     }\n//   };\n\n//   const getStatusBadge = (status) => {\n//     switch(status) {\n//       case 'pending':\n//         return <span className=\"status pending\">Pending</span>;\n//       case 'confirmed':\n//         return <span className=\"status confirmed\">Confirmed</span>;\n//       case 'completed':\n//         return <span className=\"status completed\">Completed</span>;\n//       case 'rejected':\n//         return <span className=\"status rejected\">Rejected</span>;\n//       case 'cancelled':\n//         return <span className=\"status cancelled\">Cancelled</span>;\n//       default:\n//         return <span className=\"status unknown\">Unknown</span>;\n//     }\n//   };\n\n//   if (loading) {\n//     return <div className=\"loading\">Loading...</div>;\n//   }\n\n//   if (!workerData) {\n//     return (\n//       <div className=\"no-profile\">\n//         <h2>You need to create your worker profile first</h2>\n//         <Link to=\"/worker-profile\" className=\"btn\">Create Profile</Link>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"dashboard\">\n//       <div className=\"dashboard-header\">\n//         <h1>Welcome, {workerData.name}</h1>\n//         <p>Here's your work dashboard</p>\n        \n//         {newBookings.length > 0 && (\n//           <div className=\"notification-badge\">\n//             {newBookings.length} new booking{newBookings.length > 1 ? 's' : ''}\n//           </div>\n//         )}\n//       </div>\n      \n//       <div className=\"dashboard-stats\">\n//         <div className=\"stat-card\">\n//           <h3>Total Bookings</h3>\n//           <p>{bookings.length}</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>Upcoming Jobs</h3>\n//           <p>{bookings.filter(b => b.status === 'confirmed').length}</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>Pending Requests</h3>\n//           <p>{newBookings.length}</p>\n//         </div>\n//       </div>\n      \n//       <div className=\"dashboard-sections\">\n//         <section className=\"pending-requests\">\n//           <h2>Pending Booking Requests</h2>\n//           {newBookings.length === 0 ? (\n//             <div className=\"no-requests\">\n//               <p>You don't have any pending booking requests.</p>\n//             </div>\n//           ) : (\n//             <div className=\"requests-list\">\n//               {newBookings.map((booking) => (\n//                 <div key={booking.id} className=\"request-card\">\n//                   <div className=\"request-header\">\n//                     <h3>Booking from {booking.userName}</h3>\n//                     {getStatusBadge(booking.status)}\n//                   </div>\n//                   <div className=\"request-details\">\n//                     <p><strong>Service:</strong> {workerData.profession}</p>\n//                     <p><strong>Date:</strong> {booking.date}</p>\n//                     <p><strong>Time:</strong> {booking.time}</p>\n//                     <p><strong>Duration:</strong> {booking.hours} hours</p>\n//                     <p><strong>Total Earnings:</strong> ${booking.total}</p>\n//                   </div>\n//                   <div className=\"request-actions\">\n//                     <button \n//                       className=\"accept-btn\"\n//                       onClick={() => handleBookingAction(booking.id, 'accept')}\n//                     >\n//                       Accept\n//                     </button>\n//                     <button \n//                       className=\"reject-btn\"\n//                       onClick={() => handleBookingAction(booking.id, 'reject')}\n//                     >\n//                       Reject\n//                     </button>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </section>\n        \n//         <section className=\"upcoming-jobs\">\n//           <h2>Your Confirmed Jobs</h2>\n//           {bookings.filter(b => b.status === 'confirmed').length === 0 ? (\n//             <div className=\"no-jobs\">\n//               <p>You don't have any confirmed jobs.</p>\n//             </div>\n//           ) : (\n//             <div className=\"jobs-list\">\n//               {bookings\n//                 .filter(booking => booking.status === 'confirmed')\n//                 .map((booking) => (\n//                   <div key={booking.id} className=\"job-card\">\n//                     <div className=\"job-header\">\n//                       <h3>Booking from {booking.userName}</h3>\n//                       {getStatusBadge(booking.status)}\n//                     </div>\n//                     <div className=\"job-details\">\n//                       <p><strong>Date:</strong> {booking.date}</p>\n//                       <p><strong>Time:</strong> {booking.time}</p>\n//                       <p><strong>Duration:</strong> {booking.hours} hours</p>\n//                       <p><strong>Earnings:</strong> ${booking.total}</p>\n//                     </div>\n//                     <div className=\"job-actions\">\n//                       <button \n//                         className=\"complete-btn\"\n//                         onClick={() => handleCompleteBooking(booking.id)}\n//                       >\n//                         Mark as Completed\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))}\n//             </div>\n//           )}\n//         </section>\n        \n//         <section className=\"quick-actions\">\n//           <h2>Quick Actions</h2>\n//           <div className=\"actions-grid\">\n//             <Link to=\"/worker-profile\" className=\"action-card\">\n//               <h3>Update Profile</h3>\n//               <p>Edit your profile information</p>\n//             </Link>\n//             <Link to=\"/availability\" className=\"action-card\">\n//               <h3>Set Availability</h3>\n//               <p>Update when you're available</p>\n//             </Link>\n//             <Link to=\"/bookings\" className=\"action-card\">\n//               <h3>View All Bookings</h3>\n//               <p>See all your bookings</p>\n//             </Link>\n//           </div>\n//         </section>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default WorkerDashboard;\n\n\n\nimport { useState, useEffect } from 'react';\nimport { doc, getDoc, collection, query, where, getDocs, updateDoc, onSnapshot } from 'firebase/firestore';\nimport { db } from '../../firebase/config';\nimport { useAuth } from '../../context/AuthContext';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport '../../styles/dashboard.css';\n\nconst WorkerDashboard = () => {\n  const [workerData, setWorkerData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [bookings, setBookings] = useState([]);\n  const [pendingBookings, setPendingBookings] = useState([]);\n  const [confirmedBookings, setConfirmedBookings] = useState([]);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    const fetchWorkerData = async () => {\n      if (!user) return;\n      \n      try {\n        const workerRef = doc(db, 'workers', user.uid);\n        const workerSnap = await getDoc(workerRef);\n        \n        if (workerSnap.exists()) {\n          setWorkerData(workerSnap.data());\n        } else {\n          window.location.href = '/worker-profile';\n        }\n      } catch (error) {\n        console.error(\"Error fetching worker data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Real-time listener for all bookings\n    const unsubscribeBookings = onSnapshot(\n      query(collection(db, 'bookings'), where('workerId', '==', user.uid)),\n      (snapshot) => {\n        const allBookings = [];\n        const newPending = [];\n        const newConfirmed = [];\n        \n        snapshot.forEach((doc) => {\n          const booking = { id: doc.id, ...doc.data() };\n          allBookings.push(booking);\n          \n          if (booking.status === 'pending') {\n            newPending.push(booking);\n          } else if (booking.status === 'confirmed') {\n            newConfirmed.push(booking);\n          }\n        });\n\n        setBookings(allBookings);\n        setPendingBookings(newPending);\n        setConfirmedBookings(newConfirmed);\n\n        // Check for new pending bookings\n        snapshot.docChanges().forEach((change) => {\n          if (change.type === 'added' && change.doc.data().status === 'pending') {\n            toast.info(`New booking request from ${change.doc.data().userName}`, {\n              autoClose: false,\n              closeOnClick: false\n            });\n          }\n        });\n      }\n    );\n\n    fetchWorkerData();\n    return () => unsubscribeBookings();\n  }, [user]);\n\n  const handleBookingAction = async (bookingId, action) => {\n    try {\n      const bookingRef = doc(db, 'bookings', bookingId);\n      const newStatus = action === 'accept' ? 'confirmed' : 'rejected';\n      \n      await updateDoc(bookingRef, {\n        status: newStatus,\n        updatedAt: new Date()\n      });\n      \n      // Update local state\n      setBookings(bookings.map(b => \n        b.id === bookingId ? {...b, status: newStatus} : b\n      ));\n      \n      setPendingBookings(pendingBookings.filter(b => b.id !== bookingId));\n      \n      if (newStatus === 'confirmed') {\n        setConfirmedBookings([...confirmedBookings, \n          {...bookings.find(b => b.id === bookingId), status: 'confirmed'}\n        ]);\n      }\n      \n      toast.success(`Booking ${newStatus} successfully!`);\n      \n    } catch (error) {\n      console.error(`Error ${action}ing booking:`, error);\n      toast.error(`Error ${action}ing booking`);\n    }\n  };\n\n  const handleCompleteBooking = async (bookingId) => {\n    try {\n      const bookingRef = doc(db, 'bookings', bookingId);\n      await updateDoc(bookingRef, {\n        status: 'completed',\n        completedAt: new Date()\n      });\n      \n      setBookings(bookings.map(b => \n        b.id === bookingId ? {...b, status: 'completed'} : b\n      ));\n      \n      setConfirmedBookings(confirmedBookings.filter(b => b.id !== bookingId));\n      \n      toast.success('Booking marked as completed!');\n    } catch (error) {\n      console.error('Error completing booking:', error);\n      toast.error('Error completing booking');\n    }\n  };\n\n  const getStatusBadge = (status) => {\n    switch(status) {\n      case 'pending':\n        return <span className=\"status pending\">Pending</span>;\n      case 'confirmed':\n        return <span className=\"status confirmed\">Confirmed</span>;\n      case 'completed':\n        return <span className=\"status completed\">Completed</span>;\n      case 'rejected':\n        return <span className=\"status rejected\">Rejected</span>;\n      case 'cancelled':\n        return <span className=\"status cancelled\">Cancelled</span>;\n      default:\n        return <span className=\"status unknown\">Unknown</span>;\n    }\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n\n  if (!workerData) {\n    return (\n      <div className=\"no-profile\">\n        <h2>You need to create your worker profile first</h2>\n        <Link to=\"/worker-profile\" className=\"btn\">Create Profile</Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <h1>Welcome, {workerData.name}</h1>\n        <p>Here's your work dashboard</p>\n        \n        {pendingBookings.length > 0 && (\n          <div className=\"notification-badge\">\n            {pendingBookings.length} new booking{pendingBookings.length > 1 ? 's' : ''}\n          </div>\n        )}\n      </div>\n      \n      <div className=\"dashboard-stats\">\n        <div className=\"stat-card\">\n          <h3>Total Bookings</h3>\n          <p>{bookings.length}</p>\n        </div>\n        <div className=\"stat-card\">\n          <h3>Upcoming Jobs</h3>\n          <p>{confirmedBookings.length}</p>\n        </div>\n        <div className=\"stat-card\">\n          <h3>Pending Requests</h3>\n          <p>{pendingBookings.length}</p>\n        </div>\n      </div>\n      \n      <div className=\"dashboard-sections\">\n        <section className=\"pending-requests\">\n          <h2>Pending Booking Requests</h2>\n          {pendingBookings.length === 0 ? (\n            <div className=\"no-requests\">\n              <p>You don't have any pending booking requests.</p>\n            </div>\n          ) : (\n            <div className=\"requests-list\">\n              {pendingBookings.map((booking) => (\n                <div key={booking.id} className=\"request-card\">\n                  <div className=\"request-header\">\n                    <h3>Booking from {booking.userName}</h3>\n                    {getStatusBadge(booking.status)}\n                  </div>\n                  <div className=\"request-details\">\n                    <p><strong>Service:</strong> {workerData.profession}</p>\n                    <p><strong>Date:</strong> {booking.date}</p>\n                    <p><strong>Time:</strong> {booking.time}</p>\n                    <p><strong>Duration:</strong> {booking.hours} hours</p>\n                    <p><strong>Total Earnings:</strong> ${booking.total}</p>\n                  </div>\n                  <div className=\"request-actions\">\n                    <button \n                      className=\"accept-btn\"\n                      onClick={() => handleBookingAction(booking.id, 'accept')}\n                    >\n                      Accept\n                    </button>\n                    <button \n                      className=\"reject-btn\"\n                      onClick={() => handleBookingAction(booking.id, 'reject')}\n                    >\n                      Reject\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </section>\n        \n        <section className=\"upcoming-jobs\">\n          <h2>Your Confirmed Jobs</h2>\n          {confirmedBookings.length === 0 ? (\n            <div className=\"no-jobs\">\n              <p>You don't have any confirmed jobs.</p>\n            </div>\n          ) : (\n            <div className=\"jobs-list\">\n              {confirmedBookings.map((booking) => (\n                <div key={booking.id} className=\"job-card\">\n                  <div className=\"job-header\">\n                    <h3>Booking from {booking.userName}</h3>\n                    {getStatusBadge(booking.status)}\n                  </div>\n                  <div className=\"job-details\">\n                    <p><strong>Date:</strong> {booking.date}</p>\n                    <p><strong>Time:</strong> {booking.time}</p>\n                    <p><strong>Duration:</strong> {booking.hours} hours</p>\n                    <p><strong>Earnings:</strong> ${booking.total}</p>\n                  </div>\n                  <div className=\"job-actions\">\n                    <button \n                      className=\"complete-btn\"\n                      onClick={() => handleCompleteBooking(booking.id)}\n                    >\n                      Mark as Completed\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </section>\n        \n        <section className=\"quick-actions\">\n          <h2>Quick Actions</h2>\n          <div className=\"actions-grid\">\n            <Link to=\"/worker-profile\" className=\"action-card\">\n              <h3>Update Profile</h3>\n              <p>Edit your profile information</p>\n            </Link>\n            <Link to=\"/availability\" className=\"action-card\">\n              <h3>Set Availability</h3>\n              <p>Update when you're available</p>\n            </Link>\n            <Link to=\"/bookings\" className=\"action-card\">\n              <h3>View All Bookings</h3>\n              <p>See all your bookings</p>\n            </Link>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkerDashboard;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,SAAS,EAAEC,UAAU,QAAQ,oBAAoB;AAC1G,SAASC,EAAE,QAAQ,uBAAuB;AAC1C,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,G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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}